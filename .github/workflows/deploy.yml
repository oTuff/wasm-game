name: Deploy
on:
  push:
    branches: main
  pull_request:
    branches: main

permissions:
  contents: read
  pull-requests: read

jobs:
  # changes:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     go_ebitengine: ${{ steps.filter.outputs.go_ebitengine }}
  #     rust_bevy: ${{ steps.filter.outputs.rust_bevy }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: dorny/paths-filter@v3
  #       id: filter
  #       with:
  #         filters: |
  #           go_ebitengine:
  #             - 'go-ebitengine/**'
  #           rust_bevy:
  #             - 'rust-bevy/**'
  build_go:
    runs-on: ubuntu-latest
    # needs: changes
    # if: needs.changes.outputs.go_ebitengine == 'true'
    defaults:
      run:
        working-directory: ./go-ebitengine
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24
          cache-dependency-path: go-ebitengine/go.sum

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt install -y libc6-dev libgl1-mesa-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev libxxf86vm-dev libasound2-dev pkg-config

      - name: Install Dependencies
        run: go mod tidy

      # - name: Static Analysis # somehow the syscall/js broke it
      #   run: go vet ./...

      # - name: Run Tests
      #   run: go test ./...

      - name: Build WASM
        run: GOOS=js GOARCH=wasm go build -o public/game.wasm

      # - name: Cache built Go WASM
      #   uses: actions/cache@v4
      #   with:
      #     path: public/game.wasm
      #     key: ${{ runner.os }}-go-wasm-${{ hashFiles('go-ebitengine/**/*.go') }}

      - name: Upload wasm file
        uses: actions/upload-artifact@v4
        with:
          name: game-wasm
          path: go-ebitengine/public/game.wasm

  build_rust:
    runs-on: ubuntu-latest
    # needs: changes
    # if: needs.changes.outputs.rust_bevy == 'true'
    defaults:
      run:
        working-directory: ./rust-bevy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}
          cache-all-crates: true
          workspaces: rust-bevy

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      # - name: Install latest binaryen (wasm-opt)
      #   run: |
      #     wget https://github.com/WebAssembly/binaryen/releases/download/version_116/binaryen-version_116-x86_64-linux.tar.gz
      #     tar -xzf binaryen-version_116-x86_64-linux.tar.gz
      #     sudo cp binaryen-version_116/bin/wasm-opt /usr/local/bin/

      # - name: Install wasm-bindgen-cli from GitHub release
      #   run: |
      #     WASM_BINDGEN_VERSION=0.2.84  # Match the Cargo.toml version!
      #     wget https://github.com/rustwasm/wasm-bindgen/releases/download/${WASM_BINDGEN_VERSION}/wasm-bindgen-${WASM_BINDGEN_VERSION}-x86_64-unknown-linux-musl.tar.gz
      #     tar -xzf wasm-bindgen-${WASM_BINDGEN_VERSION}-x86_64-unknown-linux-musl.tar.gz
      #     sudo cp wasm-bindgen-${WASM_BINDGEN_VERSION}-x86_64-unknown-linux-musl/wasm-bindgen* /usr/local/bin/
      # # - name: Install System Dependencies
      #   run: |
      #     cargo install wasm-bindgen-cli --force
      #     # sudo apt-get update
      #     # sudo apt-get install -y binaryen

      - name: Install wasm-pack
        run: curl -sSfL https://rustwasm.github.io/wasm-pack/installer/init.sh | sh -s -- -y

      - name: Build with wasm-pack
        run: wasm-pack build --target web

      # - name: Cache built Rust WASM
      #   uses: actions/cache@v4
      #   with:
      #     path: pkg
      #     key: ${{ runner.os }}-rust-wasm-${{ hashFiles('rust-bevy/src/**') }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-pack
          path: rust-bevy/pkg

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build_go, build_rust]
    # needs: [build_go, build_rust, changes]
    # if: always()
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Download Go WASM if built, or restore from cache if not
      - name: Download go wasm file
        # if: needs.changes.outputs.go_ebitengine == 'true'
        uses: actions/download-artifact@v4
        with:
          name: game-wasm
          path: ./go-ebitengine/public

      # - name: Restore cached Go WASM
      #   if: needs.changes.outputs.go_ebitengine != 'true'
      #   uses: actions/cache@v4
      #   with:
      #     path: go-ebitengine/public/game.wasm
      #     key: ${{ runner.os }}-go-wasm-${{ hashFiles('go-ebitengine/**/*.go') }}

      # Download Rust WASM if built, or restore from cache if not
      - name: Download rust wasm file
        # if: needs.changes.outputs.rust_bevy == 'true'
        uses: actions/download-artifact@v4
        with:
          name: wasm-pack
          path: ./rust-bevy/public/pkg

      # - name: Restore cached Rust WASM
      #   if: needs.changes.outputs.rust_bevy != 'true'
      #   uses: actions/cache@v4
      #   with:
      #     path: rust-bevy/pkg
      #     key: ${{ runner.os }}-rust-wasm-${{ hashFiles('rust-bevy/src/**') }}

      - name: Install Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Upload to Deno Deploy
        uses: denoland/deployctl@v1
        with:
          project: "otuff-wasm-game-36"
          entrypoint: "server.tsx"
          root: "."
